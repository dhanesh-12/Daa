import numpy as np
def tsp(graph):
    n = len(graph)
    dp = np.full((n, 1 << n), np.inf)
    path = np.full((n, 1 << n), -1, dtype=int)
    dp[0][1] = 0
    for mask in range(1, 1 << n):
        for u in range(n):
            if not (mask & (1 << u)): continue
            for v in range(n):
                if u != v and (mask & (1 << v)):
                    new_cost = dp[v][mask ^ (1 << u)] + graph[v][u]
                    if new_cost < dp[u][mask]:
                        dp[u][mask] = new_cost
                        path[u][mask] = v
    end_dist, u = min((dp[i][(1 << n) - 1] + graph[i][0], i) for i in range(1, n))
    mask, tour = (1 << n) - 1, [u]
    while u != 0:
        u = path[u][mask]
        tour.append(u)
        mask ^= 1 << tour[-2]
    path_nodes = tour[::-1] + [0]
    return int(end_dist), list(map(int, path_nodes))
graph = [[0, 10, 15, 20],[10, 0, 35, 25],[15, 35, 0, 30],[20, 25, 30, 0]]
dist, path = tsp(graph)
print("Minimum Distance:", dist)
print("Shortest Path:", path)
print("Path Cost Calculation:")
cost = 0
for i in range(len(path) - 1):
    c = graph[path[i]][path[i+1]]
    print(f"{path[i]} -> {path[i+1]} : {c}")
    cost += c
print("Total Path Cost:", cost)
